// MCmesher
// Kyle J Burgess

#ifndef MC_MESHER_H
#define MC_MESHER_H

#include "Vector.h"
#include <cstdint>

extern "C"
{
    // Stores vertices, indices, and normals
    // generated by GenerateMesh functions
    struct                        McmMeshBuffer;

    // Generic result for MCmesher functions
    enum                          McmResult
    {
        MCM_SUCCESS                   = 0,            // Function was successful
        MCM_MESH_BUFFER_IS_NULL       = 1,            // Error, the mesh buffer passed to the function was NULL
        MCM_OUT_OF_BOUNDS_X           = 2,            // Error, an argument passed to the function was out of bounds in the x-axis
        MCM_OUT_OF_BOUNDS_Y           = 3,            // Error, an argument passed to the function was out of bounds in the y-axis
        MCM_OUT_OF_BOUNDS_Z           = 4,            // Error, an argument passed to the function was out of bounds in the z-axis
    };

    // Create an McmMeshBuffer and return its handle (pointer)
    McmMeshBuffer*        __cdecl mcmCreateMeshBuffer();

    // Delete an McmMeshBuffer, invalidating the handle
    void                  __cdecl mcmDeleteMeshBuffer(
        McmMeshBuffer*                meshBuffer);    // Handle to a valid mcmMeshBuffer object

    // Generate a marching cubes mesh with vertex normals, and store the results in an McmMeshBuffer
    McmResult             __cdecl mcmGenerateMeshVN(
        McmMeshBuffer*                meshBuffer,     // Handle to a valid mcmMeshBuffer object
        const float*                  data,           // 3D field of scalar floating-point values as a contiguous array
        Vector3<uint32_t>             dataSize,       // Size of 3D field x, y, and z axis (in vertices) where field array length is x * y * z
        Vector3<uint32_t>             meshOrigin,     // Origin of the mesh to generate (in cubes) within the 3D field
        Vector3<uint32_t>             meshSize,       // Size of the mesh to generate (in cubes) within the 3D field
        float                         isoLevel);      // The ISO level for the surface (under ISO = inside the volume, over ISO = outside the volume)

    // Generate a marching cubes mesh with face normals, and store the results in an McmMeshBuffer
    McmResult             __cdecl mcmGenerateMeshFN(
        McmMeshBuffer*                meshBuffer,     // Handle to a valid mcmMeshBuffer object
        const float*                  data,           // 3D field of scalar floating-point values as a contiguous array
        Vector3<uint32_t>             dataSize,       // Size of 3D field x, y, and z axis (in vertices) where field array length is x * y * z
        Vector3<uint32_t>             meshOrigin,     // Origin of the mesh to generate (in cubes) within the 3D field
        Vector3<uint32_t>             meshSize,       // Size of the mesh to generate (in cubes) within the 3D field
        float                         isoLevel);      // The ISO level for the surface (under ISO = inside the volume, over ISO = outside the volume)

    // Count the number of vertices in the mesh
    uint32_t              __cdecl mcmCountVertices(
        const McmMeshBuffer*          meshBuffer);    // Handle to a valid mcmMeshBuffer object

    // Returns a pointer to the mesh vertices
    const Vector3<float>* __cdecl mcmGetVertices(
        const McmMeshBuffer*          meshBuffer);    // Handle to a valid mcmMeshBuffer object

    // Copies vertices into a buffer
    void                  __cdecl mcmCopyVertices(
        const McmMeshBuffer*          meshBuffer,     // Handle to a valid mcmMeshBuffer object
        Vector3<float>*               dstBuffer);     // Destination buffer of Vector3<float> (allocated size must be >= mcmCountVertices(meshBuffer))

    // Count the number of normals in the mesh
    uint32_t              __cdecl mcmCountNormals(
        const McmMeshBuffer*          meshBuffer);    // Handle to a valid mcmMeshBuffer object

    // Returns a pointer to the mesh normal vectors
    const Vector3<float>* __cdecl mcmGetNormals(
        const McmMeshBuffer*          meshBuffer);    // Handle to a valid mcmMeshBuffer object

    // Copies normals into a buffer
    void                  __cdecl mcmCopyNormals(
        const McmMeshBuffer*          meshBuffer,     // Handle to a valid mcmMeshBuffer object
        Vector3<float>*               dstBuffer);     // Destination buffer of Vector3<float> (allocated size must be >= mcmCountNormals(meshBuffer))

    // Count the number of indices in the mesh
    uint32_t              __cdecl mcmCountIndices(
        const McmMeshBuffer*          meshBuffer);    // Handle to a valid mcmMeshBuffer object

    // Returns a pointer to the mesh indices
    const uint32_t*       __cdecl mcmGetIndices(
        const McmMeshBuffer*          meshBuffer);    // Handle to a valid mcmMeshBuffer object

    // Copies indices into a buffer
    void                  __cdecl mcmCopyIndices(
        const McmMeshBuffer*          meshBuffer,     // Handle to a valid mcmMeshBuffer object
        uint32_t*                     dstBuffer);     // Destination buffer of Vector3<float> (allocated size must be >= mcmCountIndices(meshBuffer))
}

#endif
